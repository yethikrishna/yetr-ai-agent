{"extracted_information": "The Model Context Protocol (MCP) is based on a flexible, extensible client-server architecture. It involves Hosts (LLM applications), Clients (maintaining 1:1 connections within the Host), and Servers (providing context, tools, and prompts). Communication is handled by a Protocol layer for high-level patterns and a Transport layer for actual communication, using JSON-RPC 2.0 messages. The connection lifecycle includes initialization, message exchange (supporting request-response and one-way notifications), and termination. The provided content focuses on the 1:1 client-server connection model and does not detail mechanisms for a single client interacting with multiple servers or multi-server handling strategies.", "specifications": {"protocol_layer": {"description": "Handles message framing, request/response linking, and high-level communication patterns.", "key_classes": ["Protocol", "Client", "Server"]}, "transport_layer": {"description": "Handles the actual communication between clients and servers.", "mechanisms": [{"name": "Stdio transport", "description": "Uses standard input/output; ideal for local processes."}, {"name": "HTTP with SSE transport", "description": "Uses Server-Sent Events for server-to-client messages and HTTP POST for client-to-server messages."}], "underlying_protocol": "JSON-RPC 2.0"}, "message_format": "JSON-RPC 2.0", "error_handling": {"standard_error_codes": {"ParseError": -32700, "InvalidRequest": -32600, "MethodNotFound": -32601, "InvalidParams": -32602, "InternalError": -32603}, "custom_error_codes": "SDKs and applications can define their own error codes above -32000.", "propagation": ["Error responses to requests", "Error events on transports", "Protocol-level error handlers"]}}, "pricing": {}, "features": [{"name": "Architecture Model", "description": "Client-Server architecture."}, {"name": "Roles", "details": [{"role": "Hosts", "description": "LLM applications (e.g., Claude Desktop, IDEs) that initiate connections."}, {"role": "Clients", "description": "Maintain 1:1 connections with servers, inside the host application."}, {"role": "Servers", "description": "Provide context, tools, and prompts to clients."}]}, {"name": "Message Types", "details": [{"type": "Requests", "description": "Expect a response from the other side."}, {"type": "Results", "description": "Successful responses to requests."}, {"type": "Errors", "description": "Indicate that a request failed."}, {"type": "Notifications", "description": "One-way messages that donâ€™t expect a response."}]}, {"name": "Connection Lifecycle", "stages": [{"stage": "Initialization", "steps": ["Client sends 'initialize' request.", "Server responds with protocol version and capabilities.", "Client sends 'initialized' notification.", "Normal message exchange begins."]}, {"stage": "Message Exchange", "patterns": ["Request-Response: Client or server sends requests, the other responds.", "Notifications: Either party sends one-way messages."]}, {"stage": "Termination", "methods": ["Clean shutdown via 'close()'.", "Transport disconnection.", "Error conditions."]}]}], "statistics": {}, "temporal_info": {}, "geographical_data": {}, "references": [{"type": "Standard", "name": "JSON-RPC", "url": "https://www.jsonrpc.org/"}, {"type": "Specification", "name": "Model Context Protocol Specification", "url": "/specification"}]}