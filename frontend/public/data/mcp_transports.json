{"extracted_information": "The Model Context Protocol (MCP) uses a transport layer to manage communication between clients and servers. This layer is responsible for the underlying mechanics of sending and receiving messages. MCP utilizes JSON-RPC 2.0 as its wire format. The transport layer converts MCP protocol messages into JSON-RPC format for transmission and back again upon receipt. The document details the structure of JSON-RPC Requests, Responses, and Notifications. Two built-in transport types are provided: Standard Input/Output (stdio) for local integrations and command-line tools, and Server-Sent Events (SSE) for server-to-client streaming (with HTTP POST for client-to-server). Custom transports can also be implemented by conforming to a specific Transport interface. The document also covers error handling, best practices, security considerations (authentication, authorization, data security, network security, including specific warnings about DNS rebinding for SSE), and debugging tips.", "specifications": {"jsonrpc_version": "2.0", "jsonrpc_message_formats": {"request": {"jsonrpc": "string", "id": "number | string", "method": "string", "params": "object (optional)"}, "response": {"jsonrpc": "string", "id": "number | string", "result": "object (optional)", "error": {"code": "number", "message": "string", "data": "unknown (optional)"}}, "notification": {"jsonrpc": "string", "method": "string", "params": "object (optional)"}}, "transport_interface": {"methods": ["start(): Promise<void>", "send(message: JSONRPCMessage): Promise<void>", "close(): Promise<void>"], "callbacks": ["onclose?: () => void", "onerror?: (error: Error) => void", "onmessage?: (message: JSONRPCMessage) => void"]}}, "pricing": {}, "features": ["JSON-RPC 2.0 wire format", "Conversion between MCP protocol messages and JSON-RPC", "Support for JSON-RPC Requests, Responses, and Notifications", "Built-in Standard Input/Output (stdio) transport", "Built-in Server-Sent Events (SSE) transport", "Support for custom transport implementations", "Defined Transport interface for custom implementations", "Error handling mechanisms", "Security considerations (authentication, authorization, data security, network security)", "Best practices for transport implementation/usage", "Debugging guidance"], "statistics": {}, "temporal_info": {}, "geographical_data": {}, "references": ["https://www.jsonrpc.org/"]}