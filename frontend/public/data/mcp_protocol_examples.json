{"extracted_information": "The provided web content describes the MCP (Model Context Protocol) base protocol, which is built on JSON-RPC 2.0. It details the core message types (Requests, Responses, and Notifications), how messages are structured for different transports (Stdio and Streamable HTTP), batching, lifecycle management messages, and authorization.", "specifications": {"protocol_version": "2025-03-26", "base_protocol": "JSON-RPC 2.0", "message_types": ["Request", "Response", "Notification"], "request_structure": {"jsonrpc": "String (required, must be '2.0')", "id": "String or Number (required, must be unique per session, not null)", "method": "String (required, name of the method to be invoked)", "params": "Object or Array (optional, parameters for the method)"}, "response_structure": {"jsonrpc": "String (required, must be '2.0')", "id": "String or Number (required, matches the request id)", "result": "Any (required for success, the result of the method invocation)", "error": {"code": "Number (required, error code)", "message": "String (required, short description of the error)", "data": "Any (optional, additional information about the error)"}, "notes": "Exactly one of 'result' or 'error' must be present."}, "notification_structure": {"jsonrpc": "String (required, must be '2.0')", "method": "String (required, name of the method to be invoked)", "params": "Object or Array (optional, parameters for the method)", "notes": "No 'id' field is present, and no response is expected."}, "batch_structure": "Array of JSON-RPC messages (Requests and/or Notifications)", "transports": ["Stdio", "Streamable HTTP"], "stdio_transport_format": "Messages are newline-delimited JSON objects. Client writes requests/notifications to stdin, server writes responses/notifications to stdout. Server can write logs to stderr.", "streamable_http_transport_format": "Uses HTTP POST to /mcp. Client sends messages as JSON in the request body. Server responds with JSON (for single responses) or uses Server-Sent Events (SSE) for streaming multiple messages.", "streamable_http_accept_header": "Client includes `Accept: application/json, text/event-stream` to indicate support for JSON and SSE.", "streamable_http_post_path": "/mcp", "lifecycle_messages": ["initialize", "initialized"], "authorization": {"methods": ["OAuth 2.1 (e.g., Authorization Code flow)"], "header": "Authorization: Bearer <token>", "notes": "Applicable primarily to HTTP transport. Stdio might use environment variables or other means. Custom auth is possible."}, "schema_format": "TypeScript schema, with an auto-generated JSON Schema for tooling."}, "pricing": {}, "features": ["JSON-RPC 2.0 based", "Three core message types (Request, Response, Notification)", "Support for batching messages", "Multiple standard transport options (Stdio, Streamable HTTP)", "Defined lifecycle management messages", "Optional authorization framework (supports OAuth 2.1 Bearer tokens in HTTP)", "Modular design allows adding optional features", "Protocol defined by a TypeScript/JSON Schema"], "statistics": {}, "temporal_info": {"last_updated_spec_date": "March 26, 2025", "article_post_date": "April 7, 2025"}, "geographical_data": {}, "references": ["https://spec.modelcontextprotocol.io/specification/2025-03-26/basic/", "https://spec.modelcontextprotocol.io/specification/2025-03-26/basic/transports/", "https://spec.modelcontextprotocol.io/specification/2025-03-26/basic/lifecycle/", "https://spec.modelcontextprotocol.io/specification/2025-03-26/basic/#auth", "https://github.com/modelcontextprotocol/specification/blob/main/schema/2025-03-26/schema.ts", "https://modelcontextprotocol.io/examples", "https://github.com/modelcontextprotocol/specification/discussions"]}