# YETR AI Agent - Development Environment
# Docker Compose configuration for local development

version: '3.8'

services:
  # =============================================================================
  # DATABASE SERVICES
  # =============================================================================
  
  postgres:
    image: postgres:15-alpine
    container_name: yetr-postgres
    environment:
      POSTGRES_DB: yetr_db
      POSTGRES_USER: yetr_user
      POSTGRES_PASSWORD: yetr_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - yetr-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U yetr_user -d yetr_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: yetr-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - yetr-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    command: redis-server --appendonly yes

  # =============================================================================
  # BACKEND SERVICES
  # =============================================================================
  
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    container_name: yetr-backend
    environment:
      - ENVIRONMENT=development
      - DATABASE_URL=postgresql://yetr_user:yetr_password@postgres:5432/yetr_db
      - REDIS_URL=redis://redis:6379/0
      - FRONTEND_URL=http://localhost:3000
      - JWT_SECRET_KEY=dev-jwt-secret-key-change-in-production
      - LOG_LEVEL=INFO
      - DEBUG=true
      - ENABLE_MOCK_MCP_SERVERS=true
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
      - ./config:/app/config
      - ./logs:/app/logs
    networks:
      - yetr-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # =============================================================================
  # FRONTEND SERVICES
  # =============================================================================
  
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: yetr-frontend
    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_API_URL=http://localhost:8000
      - NEXT_PUBLIC_WS_URL=ws://localhost:8000
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    networks:
      - yetr-network
    depends_on:
      - backend
    restart: unless-stopped

  # =============================================================================
  # DEVELOPMENT TOOLS
  # =============================================================================
  
  # Database Administration
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: yetr-pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@yetr.dev
      PGADMIN_DEFAULT_PASSWORD: admin
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - yetr-network
    depends_on:
      - postgres
    profiles: ["tools"]

  # Redis Administration
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: yetr-redis-commander
    environment:
      - REDIS_HOSTS=local:redis:6379
    ports:
      - "8081:8081"
    networks:
      - yetr-network
    depends_on:
      - redis
    profiles: ["tools"]

  # =============================================================================
  # MONITORING SERVICES
  # =============================================================================
  
  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: yetr-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - yetr-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
    profiles: ["monitoring"]

  # Grafana for metrics visualization
  grafana:
    image: grafana/grafana:latest
    container_name: yetr-grafana
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    networks:
      - yetr-network
    depends_on:
      - prometheus
    profiles: ["monitoring"]

  # =============================================================================
  # MOCK SERVICES FOR DEVELOPMENT
  # =============================================================================
  
  # Mock MCP servers for testing
  mock-mcp-github:
    build:
      context: ./mock-mcp-servers
      dockerfile: Dockerfile.github
    container_name: yetr-mock-github
    ports:
      - "8100:8000"
    environment:
      - MCP_SERVER_TYPE=github
      - MCP_SERVER_PORT=8000
    networks:
      - yetr-network
    profiles: ["mock"]

  mock-mcp-aws:
    build:
      context: ./mock-mcp-servers
      dockerfile: Dockerfile.aws
    container_name: yetr-mock-aws
    ports:
      - "8101:8000"
    environment:
      - MCP_SERVER_TYPE=aws
      - MCP_SERVER_PORT=8000
    networks:
      - yetr-network
    profiles: ["mock"]

  mock-mcp-database:
    build:
      context: ./mock-mcp-servers
      dockerfile: Dockerfile.database
    container_name: yetr-mock-database
    ports:
      - "8102:8000"
    environment:
      - MCP_SERVER_TYPE=database
      - MCP_SERVER_PORT=8000
    networks:
      - yetr-network
    profiles: ["mock"]

# =============================================================================
# NETWORKS AND VOLUMES
# =============================================================================

networks:
  yetr-network:
    driver: bridge
    name: yetr-network

volumes:
  postgres_data:
    name: yetr-postgres-data
  redis_data:
    name: yetr-redis-data
  pgadmin_data:
    name: yetr-pgadmin-data
  prometheus_data:
    name: yetr-prometheus-data
  grafana_data:
    name: yetr-grafana-data
